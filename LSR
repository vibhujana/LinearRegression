import java.util.ArrayList;

public class LSR {
    public ArrayList<Double> _x, _y;

    public LSR(ArrayList<Double> x, ArrayList<Double> y) {
        _x = x;
        _y = y;
    }

    public double calculateMean(ArrayList<Double> list) {
        return calculateSum(list) / ((double) (list.size()));
    }

    public double calculateSum(ArrayList<Double> list) {
        double sum = 0;
        for (int i = 0; i < list.size(); i++) {
            sum += list.get(i);
        }
        return sum;

    }

    public double calculateStandardDeviation(ArrayList<Double> list) {
        double mean = calculateMean(list);
        double sum = 0;
        for (int i = 0; i < list.size(); i++) {
            sum += Math.pow(list.get(i) - mean, 2);
        }
        sum = sum / ((double) (list.size()) - 1);
        sum = Math.sqrt(sum);
        return sum;
    }

    public double calculateR() {
        double numeratorSum = 0;
        double denominatorSum = 0;
        double denominatorX = 0;
        double denominatorY = 0;
        double meanX = calculateMean(_x);
        double meanY = calculateMean(_y);
        for (int i = 0; i < _x.size(); i++) {
            numeratorSum += (_x.get(i) - meanX) * (_y.get(i) - meanY);
            denominatorX += ((_x.get(i) - meanX) * (_x.get(i) - meanX));
            denominatorY += ((_y.get(i) - meanY) * (_y.get(i) - meanY));
        }
        denominatorSum = denominatorX * denominatorY;
        return (numeratorSum) / (Math.sqrt(denominatorSum));

    }

    public double calculateSlope() {
        return calculateR() * (calculateStandardDeviation(_y) / calculateStandardDeviation(_x));
    }

    public double calculateIntercept() {
        return calculateMean(_y) - calculateSlope() * calculateMean(_x);
    }

    public double predictY(double x) {
        return calculateIntercept() + calculateSlope() * x;
    }

    public double residual(double x) {
        int loc = -1;
        for (int i = 0; i < _x.size(); i++) {
            if(_x.get(i) == x){
                loc = i;
                break;
            }
        }
        if(loc == -1){
            System.out.println("Value not in data");
            return 404;
        }
        return  _y.get(loc) - predictY(x);

    }

    public boolean contains(double[] list, double val) {
        for (int i = 0; i < list.length; i++) {
            if (list[i] == val)
                return true;
        }
        return false;
    }


}
